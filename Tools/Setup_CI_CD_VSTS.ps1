
#################################################################################
#
# This script sets up continuous integration and continuous delivery flow in
# Visual Studio Team Services. The following entities will be generated by this script: 
#    - A certificate used to deploy service fabric cluster.
#    - A VSTS GIT repo, or use  one you specified.
#    - A VSTS build definition for continuous integration and continuous deployment.
#
# Before running this script, please ensure you have an Azure account and Visual 
# Studio Team Services account. For this script to run, please enable either alternative 
# authentication credential or personal access token.
#################################################################################
param(
 [Parameter(Mandatory=$True, HelpMessage="Azure subscription Id")]
 [string]
 $subscriptionId,

 [Parameter(Mandatory=$False, HelpMessage="The application name")]
 [string]
 $applicationName,

 [Parameter(Mandatory=$False)]
 [string]
 $resourceGroupName,

 [Parameter(Mandatory=$False)]
 [string]
 $resourceGroupLocation,

 [Parameter(Mandatory=$True, HelpMessage="Your deployment cluster name.")]
 [string]
 $clusterName
)

$ErrorActionPreference = "Stop"

if ([string]::IsNullOrEmpty($applicationName)) {
  $applicationName = "Application1"
}

if ([string]::IsNullOrEmpty($resourceGroupName)) {
  $resourceGroupName = $applicationName + "-RG"
}

if ([string]::IsNullOrEmpty($resourceGroupLocation)) {
  $resourceGroupLocation = 'westus'
}

$confirmToContinue = Read-Host "Please ensure you have Azure PowerShell, AzureRM moudle and Service Fabric SDK installed. For detail, see https://azure.microsoft.com/en-us/documentation/articles/service-fabric-set-up-continuous-integration/. Press any key to continue ..."

$certPassword = Read-Host -AsSecureString "A certificate will be created during this process. Please enter password for certificate ... "
$adminPassword = Read-Host -AsSecureString  "Password for your cluster administrator account (username is admuser)"

# sign in
Write-Host "Logging in to Azure Resource Manager ...";
Login-AzureRmAccount;

# select subscription
Write-Host "Selecting subscription '$subscriptionId'";
Select-AzureRmSubscription -SubscriptionID $subscriptionId;

#Create or check for existing resource group
$resourceGroup = Get-AzureRmResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue
if(!$resourceGroup)
{
    Write-Host "Resource group '$resourceGroupName' does not exist, creating ...";
    if(!$resourceGroupLocation) {
        $resourceGroupLocation = Read-Host "resourceGroupLocation";
    }
    Write-Host "Creating resource group '$resourceGroupName' in location '$resourceGroupLocation'";
    $rmgroup = New-AzureRmResourceGroup -Name $resourceGroupName -Location $resourceGroupLocation
}
else{
    Write-Host "Using existing resource group '$resourceGroupName'";
}

Write-Host "Creating Service Principal ..."
$guidPassword = [GUID]::NewGuid()
$servicePrincipal = & "$PSScriptRoot\helpers\SPNCreation.ps1" -subscriptionId $subscriptionId -password $guidPassword

Write-Host "ServicePrincipal " $servicePrincipal.Get_Item('ServicePrincipalId') " is created."
Write-Host "ServicePrincipalKey" $servicePrincipal.Get_Item('ServicePrincipalKey')
Write-Host "TenantId" $servicePrincipal.Get_Item('TenantId')
Write-Host "SubscriptionName" $servicePrincipal.Get_Item('SubscriptionName')
Write-Host "SubscriptionId" $servicePrincipal.Get_Item('SubscriptionId')

$env:ServicePrincipalId = $servicePrincipal.Get_Item('ServicePrincipalId')
$env:ServicePrincipalKey = $servicePrincipal.Get_Item('ServicePrincipalKey')
$env:ServicePrincipalTenantId = $servicePrincipal.Get_Item('TenantId')
$env:ServicePrincipalSubscriptionName = $servicePrincipal.Get_Item('SubscriptionName')
$env:ServicePrincipalSubscriptionId = $servicePrincipal.Get_Item('SubscriptionId')

$dnsName = "$clusterName.$resourceGroupLocation.cloudapp.azure.com"

$certFile = Join-Path (pwd) 'cert.pfx'
$cert = & "$PSScriptRoot\helpers\Manual\CreateAndUpload-Certificate.ps1" -KeyVaultLocation $resourceGroupLocation -CertificateDnsName $dnsName -CertificateSecretName "Cert$clusterName" -SecureCertificatePassword $certPassword -KeyVaultName "Key$clusterName" -KeyVaultResourceGroupName $resourceGroupName -PfxFileOutputPath $certFile

Write-Host "Certificate $certFile created and uploaded to Azure key vault."

$env:ServiceFabricCertificateThumbprint = $cert.Get_Item('ServiceFabricCertificateThumbprint')
$env:ServiceFabricKeyVaultId = $cert.Get_Item('ServiceFabricKeyVaultId')
$env:ServiceFabricCertificateSecretId = $cert.Get_Item('ServiceFabricCertificateSecretId')

$azureDeployParametersTemplate = [IO.File]::ReadAllText("$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json.template")
$azureDeployParameters = $azureDeployParametersTemplate.Replace("{clusterLocation}", $resourceGroupLocation).Replace("{clusterName}", $clusterName).Replace("{adminPassword}", $adminPassword).Replace("{certificateThumbprint}", $cert.Get_Item('ServiceFabricCertificateThumbprint')).Replace("{subscriptionId}", $subscriptionId).Replace("{keyVaultResourceGroupName}", $resourceGroupName).Replace("{keyVaultName}", "Key$clusterName").Replace("{serviceFabricCertificateSecretId}", $cert.Get_Item('ServiceFabricCertificateSecretId'));
[IO.File]::WriteAllText("$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json", $azureDeployParameters)

$publishProfileTemplate = [IO.File]::ReadAllText("$PSScriptRoot\templates\publish\Cloud.xml")
$publishProfile = $publishProfileTemplate.Replace("{clusterName}", $clusterName).Replace("{clusterLocation}", $resourceGroupLocation).Replace("{thumbprint}", $cert.Get_Item('ServiceFabricCertificateThumbprint'))
[IO.File]::WriteAllText("$PSScriptRoot\..\Application1\PublishProfiles\CI.xml", $publishProfile)

$env:ServiceFabricClusterName = $clusterName
$env:ServiceFabricClusterResourceGroupName = "Cluster$resourceGroupName"
$env:ServiceFabricClusterLocation = $resourceGroupLocation
$env:ServiceFabricClusterResourceGroupTemplateFilePath = "Tools\helpers\Automation\azuredeploy.json"
$env:ServiceFabricClusterResourceGroupTemplateParametersFilePath = "Tools\helpers\Automation\azuredeploy.parameters.json"
$env:ServiceFabricPublishProfilePath = "Application1\PublishProfiles\CI.xml"
$env:ServiceFabricDeploymentScriptPath = "Application1\Scripts\Deploy-FabricApplication.ps1"
$env:ServiceFabricApplicationProjectPath = "Application1"
$env:ServicePrincipalPassword = $guidPassword
$env:ServiceFabricClusterAdminPassword = $adminPassword

$vsoAccount = Read-Host "Please enter your Visual Sutdio Team Serices URL, such as 'https://company.visualstudio.com'"
$vsoUser = Read-Host "Please enter Visual Studio Team Services username, such as john@contoso.com"
$vsoPassword = Read-Host "Please enter Visual Studio Team Services password, the one you use to access your GIT repo"
$vsoProjectName = Read-Host "Please enter the project name"
$buildDefinitionName = Read-Host "Please enter the build name, such as 'BUILD_CI'"
if ([string]::IsNullOrEmpty($buildDefinitionName)) {
  $buildDefinitionName = "BUILD_CI"
}

$vsoRepoName = $vsoProjectName
$vsoCreateCommand = & "$PSScriptRoot\helpers\Create-BuildRelease.ps1" -accountUrl "$vsoAccount" -userName "$vsoUser" -password "$vsoPassword" -projectName "$vsoProjectName" -repoName "$vsoRepoName" -buildDefinitionName $buildDefinitionName

Write-Host "********************************************************************************"
Write-Host "Repository is created. To use this GIT repo, run:"
Write-Host "	git remote add origin $vsoAccount/DefaultCollection/$vsoProjectName/_git/$vsoRepoName"
Write-Host ""
Write-Host "Build Definition $buildDefinitionName created in $vsoAccount/DefaultCollection/$vsoProjectName/_build"
Write-Host ""
Write-Host "$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json and Application1\PublishProfiles\CI.xml created. These files need to be added to your repositary to enable deploy."
Write-Host "After adding this files to your repo, push it to the GIT repo. This will automatically queue a build. Go to $vsoAccount/DefaultCollection/$vsoProjectName/_build to see its status."
Write-Host "	git push -u origin --all"
Write-Host ""
Write-Host "After the build succeeds, you should be able to access the Service Fabric cluster via:"
Write-Host "    https://$clusterName.$resourceGroupLocation.cloudapp.azure.com:19080"
Write-Host "Please use a browser that supports HTML5 local storage, such as Microsoft Edge or Chrome. Client certificate named '$clusterName.$resourceGroupLocation.cloudapp.azure.com' is required. If you need to access via browser in a different computer, please import $certFile to personal certificate store." 
Write-Host ""
Write-Host "Please follow the 'Set up your build machine' section in https://azure.microsoft.com/en-us/documentation/articles/service-fabric-set-up-continuous-integration/#set-up-your-build-machine to set up your build agent, using certificate $certFile"
Write-Host "For testing purposes, this machine already has the certificate installed. You can use this machine as your build agent (set your build agent to run as local system in this case)."
Write-Host ""
Write-Host "The generated build definition will delete the Service Fabric cluster each time, which takes 15-30 minutes. If you are Okay with reusing the same cluster, you can disable the 'Remove existing cluster' and 'Provision Secure Cluster' build steps after the first build to save considerable amount of time."
Write-Host "********************************************************************************"
