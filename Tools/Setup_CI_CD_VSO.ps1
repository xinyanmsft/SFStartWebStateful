
#################################################################################
#
# This script sets up continuous integration and continuous delivery flow in
# Visual Studio online. The following entities will be generated by this script: 
#    - A certificate used to deploy service fabric cluster.
#    - A VSOnline GIT repo, or use  one you specified.
#    - A VSOnline build definition for continuous integration.
#    - A VSOnline release definition for continuous deployment.
#
# Before running this script, please ensure you have an Azure account and Visual 
# Studio online account. For this script to run, please enable either alternative 
# authentication credential or personal access token.
#################################################################################
param(
 [Parameter(Mandatory=$True, HelpMessage="Azure subscription Id")]
 [string]
 $subscriptionId,

 [Parameter(Mandatory=$False, HelpMessage="The application name")]
 [string]
 $applicationName,

 [Parameter(Mandatory=$False)]
 [string]
 $resourceGroupName,

 [Parameter(Mandatory=$False)]
 [string]
 $resourceGroupLocation,

 [Parameter(Mandatory=$True, HelpMessage="Your deployment cluster name.")]
 [string]
 $clusterName
)

$ErrorActionPreference = "Stop"

if ([string]::IsNullOrEmpty($applicationName)) {
  $applicationName = "Application1"
}

if ([string]::IsNullOrEmpty($resourceGroupName)) {
  $resourceGroupName = $applicationName + "-RG"
}

if ([string]::IsNullOrEmpty($resourceGroupLocation)) {
  $resourceGroupLocation = 'westus'
}

$confirmToContinue = Read-Host "Please ensure you have Azure PowerShell, AzureRM moudle and Service Fabric SDK installed. For detail, see https://azure.microsoft.com/en-us/documentation/articles/service-fabric-set-up-continuous-integration/. Press any key to continue ..."

$certPassword = Read-Host -AsSecureString "A certificate will be created during this process. Please enter password for certificate ... "
$adminPassword = Read-Host -AsSecureString  "Password for your cluster administrator account (username is admuser)"

# sign in
Write-Host "Logging in to Azure Resource Manager ...";
Login-AzureRmAccount;

# select subscription
Write-Host "Selecting subscription '$subscriptionId'";
Select-AzureRmSubscription -SubscriptionID $subscriptionId;

#Create or check for existing resource group
$resourceGroup = Get-AzureRmResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue
if(!$resourceGroup)
{
    Write-Host "Resource group '$resourceGroupName' does not exist, creating ...";
    if(!$resourceGroupLocation) {
        $resourceGroupLocation = Read-Host "resourceGroupLocation";
    }
    Write-Host "Creating resource group '$resourceGroupName' in location '$resourceGroupLocation'";
    $rmgroup = New-AzureRmResourceGroup -Name $resourceGroupName -Location $resourceGroupLocation
}
else{
    Write-Host "Using existing resource group '$resourceGroupName'";
}

Write-Host "Creating Service Principal ..."
$guidPassword = [GUID]::NewGuid()
$servicePrincipal = & "$PSScriptRoot\helpers\SPNCreation.ps1" -subscriptionId $subscriptionId -password $guidPassword

Write-Host "ServicePrincipal " $servicePrincipal.Get_Item('ServicePrincipalId') " is created."
Write-Host "ServicePrincipalKey" $servicePrincipal.Get_Item('ServicePrincipalKey')
Write-Host "TenantId" $servicePrincipal.Get_Item('TenantId')
Write-Host "SubscriptionName" $servicePrincipal.Get_Item('SubscriptionName')
Write-Host "SubscriptionId" $servicePrincipal.Get_Item('SubscriptionId')

$env:ServicePrincipalId = $servicePrincipal.Get_Item('ServicePrincipalId')
$env:ServicePrincipalKey = $servicePrincipal.Get_Item('ServicePrincipalKey')
$env:ServicePrincipalTenantId = $servicePrincipal.Get_Item('TenantId')
$env:ServicePrincipalSubscriptionName = $servicePrincipal.Get_Item('SubscriptionName')
$env:ServicePrincipalSubscriptionId = $servicePrincipal.Get_Item('SubscriptionId')

$dnsName = "$clusterName.$resourceGroupLocation.cloudapp.azure.com"

$certFile = Join-Path (pwd) 'cert.pfx'
$cert = & "$PSScriptRoot\helpers\Manual\CreateAndUpload-Certificate.ps1" -KeyVaultLocation $resourceGroupLocation -CertificateDnsName $dnsName -CertificateSecretName "Cert$clusterName" -SecureCertificatePassword $certPassword -KeyVaultName "Key$clusterName" -KeyVaultResourceGroupName $resourceGroupName -PfxFileOutputPath $certFile

Write-Host "Certificate $certFile created and uploaded to Azure key vault."
Write-Host "You will need to setup up a build agent as described in section 'Set up your build machine' of this article https://azure.microsoft.com/en-us/documentation/articles/service-fabric-set-up-continuous-integration/. If you just want to give it a try, you can use this computer as a build agent."

$env:ServiceFabricCertificateThumbprint = $cert.Get_Item('ServiceFabricCertificateThumbprint')
$env:ServiceFabricKeyVaultId = $cert.Get_Item('ServiceFabricKeyVaultId')
$env:ServiceFabricCertificateSecretId = $cert.Get_Item('ServiceFabricCertificateSecretId')

$azureDeployParametersTemplate = [IO.File]::ReadAllText("$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json.template")
$azureDeployParameters = $azureDeployParametersTemplate.Replace("{clusterLocation}", $resourceGroupLocation).Replace("{clusterName}", $clusterName).Replace("{adminPassword}", $adminPassword).Replace("{certificateThumbprint}", $cert.Get_Item('ServiceFabricCertificateThumbprint')).Replace("{subscriptionId}", $subscriptionId).Replace("{keyVaultResourceGroupName}", $resourceGroupName).Replace("{keyVaultName}", "Key$clusterName").Replace("{keyVaultLocation}", $resourceGroupLocation);
[IO.File]::WriteAllText("$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json", $azureDeployParameters)

Write-Host "$PSScriptRoot\helpers\Automation\azuredeploy.parameters.json created. This file needs to be added to your repositary".

$env:ServiceFabricClusterName = $clusterName
$env:ServiceFabricClusterResourceGroupName = "Cluster$resourceGroupName"
$env:ServiceFabricClusterLocation = $resourceGroupLocation
$env:ServiceFabricClusterResourceGroupTemplateFilePath = "Tools\helpers\Automation\azuredeploy.json"
$env:ServiceFabricClusterResourceGroupTemplateParametersFilePath = "Tools\helpers\Automation\azuredeploy.parameters.json"
$env:ServiceFabricPublishProfilePath = "Application1\PublishProfiles\Cloud.xml"
$env:ServiceFabricDeploymentScriptPath = "Application1\Scripts\Deploy-FabricApplication.ps1"
$env:ServiceFabricApplicationProjectPath = "Application1"
$env:ServicePrincipalPassword = $guidPassword
$env:ServiceFabricClusterAdminPassword = $adminPassword

$vsoAccount = Read-Host "Please enter your Visual Sutdio Team Serice URL, such as 'https://company.visualstudio.com'"
$vsoUser = Read-Host "Please enter Visual Studio user name, such as john@contoso.com"
$vsoPassword = Read-Host "Please enter Visual Studio Team Service password, the one you use to access your GIT repo"
$vsoProjectName = Read-Host "Please enter the project name"

$vsoRepoName = $vsoProjectName
$vsoCreateCommand = & "$PSScriptRoot\helpers\Create-BuildRelease.ps1" -accountUrl "$vsoAccount" -userName "$vsoUser" -password "$vsoPassword" -projectName "$vsoProjectName" -repoName "$vsoRepoName"

Write-Host Build definition created.
